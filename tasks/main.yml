---
- include: preflight.yml
- include: packages-{{ ansible_pkg_mgr }}.yml

- name: Create Caddy user
  user:
    name: "{{ caddy_user }}"
    system: true
    createhome: true
    home: "{{ caddy_home }}"

- name: Build headers to use when making requests to github
  set_fact:
    caddy_github_headers: "{{ caddy_github_headers | combine({'Authorisation': 'token ' + caddy_github_token}) }}"
  when: caddy_github_token | length > 0

- name: Get all Caddy releases
  get_url:
    url: https://api.github.com/repos/mholt/caddy/git/refs/tags
    dest: "{{ caddy_home }}/releases.txt"
    force: true
    headers: '{{ caddy_github_headers }}'
  retries: 3
  delay: 2
  when: caddy_update
  register: caddy_releases_cache

- name: Set Caddy features
  copy:
    content: "{{ ','.join(caddy_packages) }}"
    dest: "{{ caddy_home }}/features.txt"
  when: caddy_update
  register: caddy_features_cache

- name: Set some common parameters
  set_fact:
    caddy_bin_name: "caddy_{{ caddy_os }}_{{ go_arch }}"
    caddy_common_args: "os={{ caddy_os }}&arch={{ go_arch }}&license={{ caddy_license }}\
                        {% for pkg in caddy_packages %}\
                        {% if loop.first %}&{% endif %}p={{ pkg }}{% if not loop.last %},{% endif %}\
                        {% endfor %}"

- name: Build base URL
  set_fact:
    caddy_base_url: "https://{{ caddy_auth_info }}@caddyserver.com/api/download"
  when: caddy_license != 'personal'

- name: Build base URL
  set_fact:
    caddy_base_url: "https://caddyserver.com/api/download"
  when: caddy_license == 'personal'

- name: Build request URLs
  set_fact:
    caddy_url: "{{ caddy_base_url }}?{{ caddy_common_args }}"
    caddy_sig_url: "{{ caddy_base_url }}/signature?{{ caddy_common_args }}"

- name: Download Caddy
  get_url:
    url: "{{ caddy_url }}"
    dest: "{{ caddy_home }}/{{ caddy_bin_name }}"
    force_basic_auth: "{{ caddy_license != 'personal' }}"
    force: true
    timeout: 300
  retries: 3
  delay: 2
  when: caddy_releases_cache.changed or caddy_features_cache.changed
  register: caddy_binary_cache
  tags: skip_ansible_lint

- name: Download Caddy
  get_url:
    url: "{{ caddy_url }}"
    dest: "{{ caddy_home }}/{{ caddy_bin_name }}"
    force_basic_auth: "{{ caddy_license != 'personal' }}"
    timeout: 300
  retries: 3
  delay: 2
  register: caddy_download
  tags: skip_ansible_lint

- name: Check if Caddy PGP key is already in keyring
  command: gpg --list-keys {{ caddy_pgp_key_id }}
  changed_when: gpg_list_keys is failed
  register: gpg_list_keys
  when: caddy_pgp_verify_signatures
  tags: skip_ansible_lint
  failed_when:
    - "gpg_list_keys is failed"
    - "'gpg: error reading key: No public key' not in gpg_list_keys.stderr"
    - "'gpg: error reading key: public key not found' not in gpg_list_keys.stderr"

- name: Download Caddy PGP key
  command: >
    gpg
      --keyserver-options timeout={{ caddy_pgp_recv_timeout }}
      --keyserver {{ caddy_pgp_key_server }}
      --recv-keys {{ caddy_pgp_key_id }}
  when: caddy_pgp_verify_signatures and gpg_list_keys.changed
  register: caddy_pgp_key
  changed_when: '"imported" in caddy_pgp_key.stdout'
  tags: skip_ansible_lint

# - name: Download Caddy signature
#   get_url:
#     url: "{{ caddy_sig_url }}"
#     dest: "{{ caddy_home }}/caddy.tar.gz.asc"
#     timeout: 60
#     force: true
#     force_basic_auth: "{{ caddy_license != 'personal' }}"
#   when: caddy_pgp_verify_signatures and (caddy_binary_cache.changed or caddy_download.changed)
#   tags: skip_ansible_lint

# - name: Verify Caddy signature
#   command: >
#     gpg
#       --verify {{ caddy_home }}/caddy.tar.gz.asc
#       {{ caddy_home }}/caddy.tar.gz
#   when: caddy_pgp_verify_signatures and (caddy_binary_cache.changed or caddy_download.changed)
#   tags: skip_ansible_lint

- name: Determine Caddy binary path
  set_fact:
    caddy_bin: "{{ caddy_bin_dir }}/caddy"

- name: Copy Caddy Binary
  copy:
    src: "{{ caddy_home }}/{{ caddy_bin_name }}"
    dest: "{{ caddy_bin }}"
    mode: 0755
    remote_src: true
  notify:
    - Restart caddy

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ caddy_user }}"
    mode: 0770
  with_items:
    - "{{ caddy_conf_dir }}"
    - "{{ caddy_certs_dir }}"

- name: Create log directory
  file:
    path: "{{ caddy_log_dir }}"
    state: directory
    owner: "{{ caddy_user }}"
    mode: 0775

- name: Create Caddyfile
  copy:
    content: "{{ caddy_config }}"
    dest: "{{ caddy_conf_dir }}/Caddyfile"
    owner: "{{ caddy_user }}"
  notify:
    - Reload caddy

- name: Systemd service
  template:
    src: caddy.service
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart caddy

- name: Set capability on the binary file to be able to bind to TCP port <1024
  capabilities:
    path: "{{ caddy_bin }}"
    capability: cap_net_bind_service+eip
    state: present
  when: caddy_setcap

- name: Ensue caddy service is up-to-date before starting it
  meta: flush_handlers

- name: Start Caddy service
  systemd:
    name: caddy
    state: started
    enabled: true
